#! /usr/bin/env python
# Code by Dex7er
# -*- coding: utf-8 -*-#
import pysrt
import os
import sys
import codecs
import chardet
import shutil

def format_subtitles(file_path):
    formatted_subtitles = []

    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:
            # Skip blank lines
            if not line.strip():
                continue

            # Check if the previous line ended with a newline character
            if formatted_subtitles and formatted_subtitles[-1].endswith('\n') and line.strip().isdigit():
                # Add a newline character before the digit
                line = '\n' + line

            formatted_subtitles.append(line)

    # Write the formatted subtitles back to the same file
    with open(file_path, 'w', encoding='utf-8') as file:
        file.writelines(formatted_subtitles)
        print(f"formatted file {file_path}...")       

    srts1 = pysrt.open(file_path, encoding='utf-8')

    for i in range(len(srts1)):   
        srts1[i].text = srts1[i].text.replace('\n', ' ').replace('\r', ' ').replace('-', '- ').replace('-  ', '- ').replace('- - >', '-->')        
    srts1.save(file_path, encoding='utf-8')
    
def convert_to_utf8_auto(file1_path):
    # Create a backup of the original file
    backup_directory = os.path.join(os.path.dirname(file1_path))
    os.makedirs(backup_directory, exist_ok=True)
    
    backup_filename = f"backup.{os.path.basename(file1_path)}"
    backup_path = os.path.join(backup_directory, backup_filename)

    if not os.path.exists(backup_path):
        shutil.copy(file1_path, backup_path)
        print("Copy filepath to backup...")     
    else:
        # Swap the contents between the original file and the backup
        shutil.copy(backup_path, file1_path)
        print("Copy backup to filepath...")        
    try:
        # Detect the source encoding
        with open(file1_path, 'rb') as raw_file:
            detector = chardet.universaldetector.UniversalDetector()
            for line in raw_file:
                detector.feed(line)
                if detector.done:
                    break
            detector.close()

        source_encoding = detector.result['encoding']

        if source_encoding is None:
            raise ValueError("Unable to detect source encoding.")
            
        print(f"{os.path.basename(file1_path)} encoding is: {source_encoding}...")     
        # Create the output file path with the source encoding information
        # output_filename = f"utf8_{os.path.basename(file1_path)}"
        # output_path = os.path.join(os.path.dirname(file1_path), output_filename)
        output_path = file1_path

        # Convert to UTF-8
        with open(file1_path, 'r', encoding=source_encoding) as source_file:
            content = source_file.read()

        with open(output_path, 'w', encoding='utf-8') as utf8_file:
            utf8_file.write(content)

        return output_path, backup_path

    except chardet.UniversalDetectorError as e:
        print(f"Error during encoding detection: {e}")
        return None, backup_path
    except Exception as e:
        print(f"Error: encoding {e}")
        return None, backup_path
    
def total_seconds(subrip_time):
    return subrip_time.seconds + subrip_time.minutes * 60 + subrip_time.hours * 3600 + subrip_time.milliseconds / 1000
    
def find_closest_subtitle_index(target_time, subtitles):
    # Convert SubRipTime to total seconds
    target_seconds = total_seconds(target_time)
    # Find the index with the minimum absolute time difference
    return min(range(len(subtitles)), key=lambda i: abs(total_seconds(subtitles[i].start) - target_seconds))

def get_unique_output_path(base_path, extension):
    i = 1
    while os.path.exists(f"{base_path}.{i}.{extension}"):
        i += 1
    return f"{base_path}.{i}.{extension}"
    
def merge_srt_files(file1_path, file2_path):
    converted_file_path1, backup_path1 = convert_to_utf8_auto(file1_path)
    converted_file_path2, backup_path2 = convert_to_utf8_auto(file2_path)
    format_subtitles(converted_file_path1)   
    format_subtitles(converted_file_path2) 
    srts1 = pysrt.open(converted_file_path1, encoding='utf-8')
    srts2 = pysrt.open(converted_file_path2, encoding='utf-8')

    directory, filename_with_extension = os.path.split(file1_path)
    filename, extension = os.path.splitext(filename_with_extension)
    # print("Directory:", directory)
    # print("Filename:", filename)
    # print("Extension:", extension)
    output_filename = f"{filename}"
    output_path = os.path.join(os.path.dirname(file1_path), output_filename)
    unique_output_path = get_unique_output_path(output_path, ".EN.CN.srt")    
    
    with open(unique_output_path, 'w', encoding='utf-8') as merged_file:    
        for i in range(len(srts2)):

            try :
                closest_index = find_closest_subtitle_index(srts2[i].start, srts1)

                print("--------")    
                print(f"Subtitle srts1 {i} start:{srts2[i].start}ï¼›Closest srts2 {closest_index} start: {srts1[closest_index].start}")

                print(srts1[closest_index].text)
                print(srts2[i].text)
 
 
                if srts1[closest_index].end <= srts2[i].start or srts1[closest_index].start >= srts2[i].end:
                    # merged_file.write(srts2[closest_index].__str__() + '\n')
                    srts1.append(srts2[i])
                else:
                    srts1[closest_index].text += '\n' + srts2[i].text
                    # merged_file.write(srts1[i].__str__() + '\n')
                    # del srts2[i]
            except:
              print(f'Subtitle {i} in {file2_path} not processed')         
    #
    srts1.sort(key=lambda x: x.start)
    srts1.save(unique_output_path, encoding='utf-8')
    os.startfile(unique_output_path)

if __name__ == "__main__":
    # Check if the correct number of arguments is provided
    if len(sys.argv) != 3:
        print("Usage: python script.py basefile_path.srt transfile_path.srt outputName_path")
        sys.exit(1)       
    # Get file paths from command-line arguments    
    file1_path = sys.argv[1]
    file2_path = sys.argv[2] 
    merge_srt_files(file1_path, file2_path)
